{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","children","props","ref","as","Toggle","split","toString","undefined","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"sources":["/Users/varvaratihonova/WebstormProjects/udemy/src/useEffect/node_modules/react-bootstrap/esm/SplitButton.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}